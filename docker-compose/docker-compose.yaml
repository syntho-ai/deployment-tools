name: syntho

services:

  database:
    image: postgres:14.5
    environment:
      - POSTGRES_USER=${DB_USER:-syntho}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_MULTIPLE_DATABASES="syntho-core","syntho-backend"
    volumes:
      - database-data:/var/lib/postgresql/data/
      - ./postgres/docker-postgres-entrypoint.sh:/docker-entrypoint-initdb.d/docker-postgres-entrypoint.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U syntho -d syntho-backend"]
      interval: 1s
      timeout: 1s
      retries: 30

  queue:
    image: redis:7.2-rc2
    healthcheck:
      test: ["CMD", "redis-cli","ping"]

  core:
    image: syntho.azurecr.io/syntho-ray:${APPLICATION_VERSION}
    restart: always
    shm_size: 12gb
    env_file:
      - path: .env
        required: true
      - path: ./core/.env
        required: false
    ports:
      - "8265:8265"
    volumes:
      - data-storage:/app/data
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    deploy:
      resources:
        limits:
          cpus: "${RAY_CPUS:-8}"
          memory: ${RAY_MEMORY:-32G}
        reservations:
          cpus: "${RAY_CPUS:-8}"
          memory: ${RAY_MEMORY:-32G}

  core-api:
    image: syntho.azurecr.io/syntho-core-api:${APPLICATION_VERSION}
    restart: on-failure
    env_file:
      - path: .env
        required: true
      - path: ./core-api/.env
        required: false
    volumes:
      - data-storage:/app/data
    healthcheck:
      test: wget --no-verbose --tries=1 -O /dev/null http://core-api:8080/api/v1/status || exit 1
      interval: 10s
      timeout: 2s
      retries: 5
      start_period: 60s
    depends_on:
      queue:
        condition: service_healthy
      database:
        condition: service_healthy

  core-api-worker:
    image: syntho.azurecr.io/syntho-core-api:${APPLICATION_VERSION}
    restart: on-failure
    command: celery -A app.celery worker --loglevel=info
    env_file:
      - path: .env
        required: true
      - path: ./core-api/.env
        required: false
    volumes:
      - data-storage:/app/data
    depends_on:
      - database
      - queue

  backend:
    image: syntho.azurecr.io/syntho-core-backend:${APPLICATION_VERSION}
    restart: on-failure
    env_file:
      - path: .env
        required: true
      - path: ./backend/.env
        required: false
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    depends_on:
      database:
        condition: service_healthy
    healthcheck:
      test: wget --no-verbose --tries=1 -O /dev/null http://backend:8000/api/docs/ || exit 1
      interval: 30s
      timeout: 2s
      retries: 10
      start_period: 60s

  backend-worker:
    image: syntho.azurecr.io/syntho-core-backend:${APPLICATION_VERSION}
    restart: on-failure
    entrypoint: [python, manage.py, subscriber]
    env_file:
      - path: .env
        required: true
      - path: ./backend/.env
        required: false
    depends_on:
      database:
        condition: service_healthy
      queue:
        condition: service_healthy

  frontend:
    image: syntho.azurecr.io/syntho-core-frontend:${APPLICATION_VERSION}
    env_file:
      - path: .env
        required: true
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=2", "-O", "/dev/null", "http://0.0.0.0:${FRONTEND_PORT:-3000}"]
      interval: 10s
      timeout: 2s
      retries: 5
      start_period: 60s

volumes:
  database-data:
    external: false
  data-storage:

networks:
  default:
    name: syntho
