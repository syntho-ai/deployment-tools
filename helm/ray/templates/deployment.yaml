apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "ray-cluster.fullname" . }}
  namespace: {{ .Release.Namespace }}
  annotations:
    argocd.argoproj.io/sync-options: Replace=true
  labels:
{{ include "ray-cluster.labels" . | indent 4 }}
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "ray-cluster.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "ray-cluster.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/component: ray-cluster
    spec:
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      serviceAccountName: {{ .Values.serviceAccount.name  }}
      volumes: []
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.operatorImage.repository }}:{{ .Values.operatorImage.tag }}"
          imagePullPolicy: {{ .Values.operatorImage.pullPolicy }}
          volumeMounts: []
          command: ["/manager", "-watch-namespace", "{{ .Release.Namespace }}", "-forced-cluster-upgrade", "true"]
          args:
          {{- if .Values.batchScheduler.enabled }}
            - --enable-batch-scheduler
          {{- else }}
            []
          {{- end }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          env: []
          livenessProbe:
            httpGet:
              path: /metrics
              port: http
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          readinessProbe:
            httpGet:
              path: /metrics
              port: http
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
