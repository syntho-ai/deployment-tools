# generated by datamodel-codegen:
#   filename:  questions-schema.json
#   timestamp: 2024-07-01T12:42:38+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional, Union

from pydantic import BaseModel, Field


class ActionEnum(Enum):
    exit = "exit"
    proceed = "proceed"
    complete = "complete"


class Env(BaseModel):
    name: str = Field(..., title="Name")
    default: Union[str, int] = Field(..., title="Default")


class EnvConfigurationScopeEnum(Enum):
    field_config_env = ".config.env"
    field_resources_env = ".resources.env"
    field_auth_env = ".auth.env"
    runtime = "runtime"


class ExposeActionFuncEnum(Enum):
    kubectlget = "kubectlget"
    returnasis = "returnasis"
    concatenate = "concatenate"
    divide = "divide"


class PostProcessingStepFuncEnum(Enum):
    lowercase = "lowercase"


class ValidationFuncEnum(Enum):
    regex = "regex"
    lowercase = "lowercase"
    kubectlget = "kubectlget"


class ValidationSuccessEnum(Enum):
    noerror = "noerror"
    notempty = "notempty"


class EnvConfiguration(BaseModel):
    scope: EnvConfigurationScopeEnum
    envs: List[Env] = Field(..., title="Envs")


class ExposeAction(BaseModel):
    name: str = Field(..., title="Name")
    func: ExposeActionFuncEnum
    args: List[str] = Field(..., title="Args")


class PostProcessingStep(BaseModel):
    func: PostProcessingStepFuncEnum


class ValidationObject(BaseModel):
    func: ValidationFuncEnum
    args: List[str] = Field(..., title="Args")
    success: ValidationSuccessEnum
    err_msg: str = Field(..., title="Err Msg")


class Condition(BaseModel):
    when: str = Field(..., title="When")
    question_id: Optional[str] = Field(..., title="Question Id")
    action: ActionEnum
    expose: List[ExposeAction] = Field(..., title="Expose")


class NextStep(BaseModel):
    value: str = Field(..., title="Value")
    conditions: List[Condition] = Field(..., title="Conditions")


class Question(BaseModel):
    id: str = Field(..., title="Id")
    question: str = Field(..., title="Question")
    var: str = Field(..., title="Var")
    default: Union[str, int] = Field(..., title="Default")
    validation: List[ValidationObject] = Field(..., title="Validation")
    post_processing: List[PostProcessingStep] = Field(..., title="Post Processing")
    next: NextStep


class QuestionSchema(BaseModel):
    entrypoint: str = Field(..., title="Entrypoint")
    questions: List[Question] = Field(..., title="Questions")
    envs_configuration: List[EnvConfiguration] = Field(..., title="Envs Configuration")
